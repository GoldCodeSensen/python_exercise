import
Python程序的每一个py文本都是一个模块，使用import引入已经写好的模块，就可以调用其他模块中的方法。
例如：
import random
temp = random.randint(1,10)意为生成一个1到10之间的随机变量。


列表：list
列表为Python中的一个类，其中的元素没有限制，类型可以不同，通过中括号来创建一个列表，
list1 = ["baba","mama"]
则list1就是一个对象，有其对应的方法和属性。
例如：
list1.append("jingjing")意为向list1中添加一个元素"jingjing"。
list1.extend(["baby"])意为扩展list1，扩展内容用列表表示。
list1.insert(0,"home")意为在列表中0号元素前插入"home"这个元素。
列表的访问像数组一样，例如list1[0]就表示列表的第一个元素"baba"。

列表的赋值
list1 = [1,2,3,4,5]
list2 = list1
list3 = list1[:]
list1.append(6)
print("list1:")
print(list1)
print("list2:")
print(list2)
print("list3:")
print(list3)
这段程序会有如下运行结果：
list1:
[1, 2, 3, 4, 5, 6]
list2:
[1, 2, 3, 4, 5, 6]
list3:
[1, 2, 3, 4, 5]
从以上结果可以看出，直接用标签赋值则会获得标签。当内容改变时，意味者两个
标签下的内容都会改变。然而我们一般想要的都是内容赋值，那么就需要用xxx[:]。


元组：tuple
相当于const型的列表，其中的元素是不能被执行更改、排序、替换等操作的。
tuple的定义不同于列表，用的圆括号，例如：
tuple1 = (1,2,3,4,5)
这个表达式也可以将小括号去掉，也符合语法。这说明逗号才是定义的关键。
例如这样定义tuple1 = (1)，则表示tuple1是一个int型变量，其值为1；这样定义tuple1 = (1,)，则表示tuple1是一个元组，其中只有一个元素1。
访问元组的元素也和访问数组一样，例如tuple1[0]。


列表、元组和字符串的共同点
——都可以通过索引得到每一个元素
——默认索引值总是从0开始
——可以通过分片的方法得到一个范围内的元素的集合
——有很多共同的操作符（重复操作符、拼接操作符、成员关系操作符）

a = "godcode"
b = list(a)
则b为列表，内容为['g','o','d','c','o','d','e']
c = (1,1,2,3,5,8,13,21,34)
d = list(c)
则d为列表，内容为[1,1,2,3,5,8,13,21,34]
其实现方法为：新建一个空列表，再循环将需要转换的元素逐一放入列表中。类似的还有tuple


循环和条件分支
while 条件：
	语句。。。
“:”是Python中非常常用的符号，比如
while xxx:
	语句...
if xxx:
	语句...
else:
	语句...
for i in xxx:
	语句...
等等


内置方法
max(object)、min(object)
返回对象元素中的最大值，其中object可以是列表，元组等。若是字符串，则按照ANSIIC码的大小比较。
sum(object)
将某对象的元素相加。只能加数字，不能加字符。
sorted(numbers)
将序列正向排序(从小到大)，返回排序后的序列
reversed(numbers)
将序列按照当前顺序逆转（不排序），返回一个迭代对象，可以由list方法转化为列表，例如list(reversed(numbers))
enumerate(numbers)
枚举。给序列编号。每个元素和编号值组成一个元组。
zip(a,b)
将a和b组合起来。按照顺序，第1个元素与第1个元素结合，第2个元素与第2个元素结合。。。


函数
用def定义函数
def func():
    xxxxx
    xxxxx
    xxxxx





